@page "/"
@using MyPokedex.Data
@using MudBlazor
@using System.Text.Json
@inject IJSRuntime JS
@inject Pokedex pokedex;
@inject NavigationManager NavigationManager

<PageTitle>Pokedex</PageTitle>


<h2 class="pokemon-title">Pokédex</h2>


<MudGrid>
    <MudItem xs="12" sm="6" md="4">
        <MudAutocomplete Style="@($"background:{Theme.Palette.Warning};")" T="PokemonBase" Variant="Variant.Outlined" Label="Pokemon" @bind-Value="selectedPokemon"
                         SearchFunc="@SearchPokemon" ToStringFunc="@(p => p?.Name)" />
    </MudItem>
    <MudItem xs="12" md="12">
        <MudButton id="GetButton" Variant="Variant.Filled" Color="Color.Primary" @onclick="GetSelectedPokemon">Get Pokemon Infos</MudButton>
    </MudItem>
</MudGrid>

@if (pokedex.SelectedPokemon != null)
{
    <MudCard Width="25%">
        <div class="d-flex align-items-center justify-content-center">
            <MudText id="selectedName" Typo="Typo.h4" Color="Color.Success">@pokedex.SelectedPokemon.Name</MudText>
        </div>
        <div style="display: flex; justify-content: space-between;">
            <div>
                
                <MudImage Src=@pokedex.SelectedPokemon.Sprite Alt="Sprite" />
            </div>
            <div>
                <MudImage Src=@pokedex.SelectedPokemon.ShinySprite Alt="Shiny Sprite" />
            </div>
        </div>
        <MudText id="selectedId" Class="cardText">Number: @pokedex.SelectedPokemon.Id</MudText>
        <MudText Class="cardText">Level: @pokedex.SelectedPokemon.Level</MudText>
        <MudText Class="cardText">Type: @pokedex.SelectedPokemon.Type</MudText>
        <MudText Class="cardText">Heigth: @pokedex.SelectedPokemon.Height m </MudText>
        <MudText Class="cardText">Weigth: @pokedex.SelectedPokemon.Weight kg</MudText>
        <MudText Class="cardText" Typo="Typo.h6">Stats:</MudText>
        <ul>
            @foreach (var stat in pokedex.SelectedPokemon.Stats)
            {
                <li>
                    <MudText Class="cardText">@stat.Name : @stat.BaseStat</MudText>
                </li>
            }
        </ul>
        <MudCardActions>
            <MudButton Color="Color.Primary" @onclick="AddFav">Add to favorites</MudButton>
            <MudButton Color="Color.Primary" @onclick="() => GetEncounter(pokedex.SelectedPokemon)">Get encounters</MudButton>
        </MudCardActions>
    </MudCard>
}

@if (ListMessage != null)
{
    <p>@ListMessage</p>
}

<h3>Favorites pokemons:</h3>

<div class="card-container">
    @if (pokedex.Favorites.Count() > 0)
    {
        @foreach (Pokemon poke in pokedex.Favorites)
        {
            <MudCard Class="card">
                <div class="centered">
                    <MudText Typo="Typo.h4" Color="Color.Success">@poke.Name</MudText>
                    </div>
                    <div class="flex-container">
                        <div>
                            <MudImage Src=@poke.Sprite Alt="Sprite" />
                        </div>
                        <div>
                            <MudImage Src=@poke.ShinySprite Alt="Shiny Sprite" />
                        </div>
                    </div>
                    <MudText Class="cardText">Number: @poke.Id</MudText>
                    <MudText Class="cardText">Level: @poke.Level</MudText>
                    <MudText Class="cardText">Type: @poke.Type</MudText>
                    <MudText Class="cardText">Heigth: @poke.Height m </MudText>
                <MudText Class="cardText">Weigth: @poke.Weight kg</MudText>
                <MudText Class="cardText" Typo="Typo.h6">Stats:</MudText>
                <ul>
                    @foreach (var stat in poke.Stats)
                    {
                        <li>
                            <MudText Class="cardText">@stat.Name : @stat.BaseStat</MudText>
                            </li>
                    }
                </ul>
                <MudCardActions>
                    <MudButton Color="Color.Primary" @onclick="() => RemoveFav(poke.Name)">Remove from favorites</MudButton>
                    <MudButton Color="Color.Primary" @onclick="() => GetEncounter(poke)">Get encounters</MudButton>
                    <MudButton Color="Color.Primary" @onclick="() => LevelUp(poke)">Level Up</MudButton>
                </MudCardActions>
            </MudCard>
        }
    }
</div>




@code{
    public PokemonBase selectedPokemon;
    private string ListMessage;
    private MudTheme Theme = new MudTheme();

    //INITIALIZE
    #region Initilize
    protected override async Task OnInitializedAsync()
    {
        await GetPokemons();

        if(pokedex.Favorites.Count() == 0)
        {
            await LoadFavs();
        }

        await base.OnInitializedAsync();
    }

    private async Task GetPokemons()
    {
        await pokedex.GetPokemon();

        if (pokedex.PokemonsList == null)
        {
            var list = await JS.InvokeAsync<string>("localStorage.getItem", "pokelist");
            if(list != null)
            {
                pokedex.PokemonsList = JsonSerializer.Deserialize<PokemonBase[]>(list);
            }
            else
            {
                ListMessage = "We apologize for the inconvenience. We are currently experiencing technical difficulties with loading the data and our team is working to resolve the issue.";
            }
        }
        else
        {
            var listSaving = JsonSerializer.Serialize(pokedex.PokemonsList);
            await JS.InvokeVoidAsync("localStorage.setItem", "pokelist", listSaving);
        }

    }
    #endregion


    //SEARCH
    #region Search
    private async Task<IEnumerable<PokemonBase>> SearchPokemon(string searchText)
    {

        // Use your Pokedex service or repository to search for Pokemon by name
        var pokemonList = await pokedex.SearchByName(searchText);
        return pokemonList;
    }

    private async Task GetSelectedPokemon()
    {
        ListMessage = null;
        if (selectedPokemon != null)
        {
            await pokedex.GetPokemonInfos(selectedPokemon.Name);
        }
    }
    #endregion


    // FAVS
    #region Favs
    private async Task LevelUp(Pokemon poke)
    {
        poke.LevelUp();
        var savings = JsonSerializer.Serialize(pokedex.Favorites);
        await JS.InvokeVoidAsync("localStorage.setItem", "pokemonfavs", savings);
    }

    private async Task AddFav()
    {
        if (pokedex.AddFavorite())
        {
            var savings = JsonSerializer.Serialize(pokedex.Favorites);
            await JS.InvokeVoidAsync("localStorage.setItem", "pokemonfavs", savings);
            ListMessage = "Adedd";
            selectedPokemon = null;
            pokedex.SelectedPokemon = null;
        }
        else
        {
            ListMessage = "Too much favs or the selected pokemon is already in favs"; 
        }
    }

    private async Task RemoveFav(string name)
    {
        if (pokedex.RemoveFavorite(name))
        {
            var savings = JsonSerializer.Serialize(pokedex.Favorites);
            await JS.InvokeVoidAsync("localStorage.setItem", "pokemonfavs", savings);
            ListMessage = "removed";
        }
        else
        {
            ListMessage = "error with remove";
        }
    }

    private async Task LoadFavs()
    {
        var favs = await JS.InvokeAsync<string>("localStorage.getItem", "pokemonfavs");
        if (favs != null)
        {
            List<Pokemon> savings = JsonSerializer.Deserialize<List<Pokemon>>(favs);
            foreach (var save in savings)
            {
                pokedex.Favorites.Add(save);
            }
        }
    }
    #endregion


    //ENCOUNTERS
    #region Encounters

    private async Task GetEncounter (Pokemon pokemon)
    {
        bool test = await pokedex.GetLocalisation(pokemon);
        if (test)
        {
            pokedex.PokemonEncounter = pokemon;
            NavigationManager.NavigateTo("/enc");
        }
        else
        {
            ListMessage = "Problem with loading encounters";
        }
    }

    #endregion
}